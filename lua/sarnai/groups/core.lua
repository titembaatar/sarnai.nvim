local M = {}

local styles = require("sarnai.config").options.styles

---@param palette table Style colors
function M.get(palette)
	return {
		ColorColumn                              = { bg = palette.surface },
		Conceal                                  = { bg = "NONE" },
		CurSearch                                = { fg = palette.text, bg = palette.els },
		Cursor                                   = { fg = palette.text, bg = palette.high },
		CursorColumn                             = { bg = palette.overlay },
		-- CursorIM = {},
		CursorLine                               = { bg = palette.overlay },
		CursorLineNr                             = { fg = palette.text, bold = styles.bold },
		-- DarkenedPanel = { },
		-- DarkenedStatusline = {},
		DiffAdd                                  = { bg = palette.mus, blend = 20 },
		DiffChange                               = { bg = palette.sarnai, blend = 20 },
		DiffDelete                               = { bg = palette.anis, blend = 20 },
		DiffText                                 = { bg = palette.sarnai, blend = 40 },
		diffAdded                                = { link = "DiffAdd" },
		diffChanged                              = { link = "DiffChange" },
		diffRemoved                              = { link = "DiffDelete" },
		Directory                                = { fg = palette.mus, bold = styles.bold },
		-- EndOfBuffer = {},
		ErrorMsg                                 = { fg = palette.anis, bold = styles.bold },
		FloatBorder                              = { fg = palette.uvs, bg = palette.base },
		FloatTitle                               = { fg = palette.mus, bg = palette.surface, bold = styles.bold },
		FoldColumn                               = { fg = palette.muted },
		Folded                                   = { fg = palette.text, bg = palette.surface },
		IncSearch                                = { link = "CurSearch" },
		LineNr                                   = { fg = palette.muted },
		MatchParn                                = { fg = palette.nuur, bg = palette.nuur, blend = 25 },
		ModeMsg                                  = { fg = palette.subtle },
		MoreMsg                                  = { fg = palette.uvs },
		NonText                                  = { fg = palette.muted },
		Normal                                   = { fg = palette.text, bg = palette.base },
		NormalFloat                              = { bg = palette.surface },
		NormalNC                                 = { fg = palette.text, bg = palette.base },
		NvimInternalError                        = { link = "ErrorMsg" },
		Pmenu                                    = { fg = palette.subtle, bg = palette.surface },
		PmenuExtra                               = { fg = palette.muted, bg = palette.surface },
		PmenuExtraSel                            = { fg = palette.subtle, bg = palette.overlay },
		PmenuKind                                = { fg = palette.mus, bg = palette.surface },
		PmenuKindSel                             = { fg = palette.subtle, bg = palette.overlay },
		PmenuSbar                                = { bg = palette.surface },
		PmenuSel                                 = { fg = palette.text, bg = palette.overlay },
		PmenuThumb                               = { bg = palette.muted },
		Question                                 = { fg = palette.els },
		-- QuickFixLink = {},
		-- RedrawDebugNormal = {},
		RedrawDebugClear                         = { fg = palette.base, bg = palette.els },
		RedrawDebugComposed                      = { fg = palette.base, bg = palette.nuur },
		RedrawDebugRecompose                     = { fg = palette.base, bg = palette.anis },
		Search                                   = { fg = palette.text, bg = palette.els, blend = 20 },
		SignColumn                               = { fg = palette.text, bg = "NONE" },
		SpecialKey                               = { fg = palette.mus },
		SpellBad                                 = { sp = palette.subtle, undercurl = true },
		SpellCap                                 = { sp = palette.subtle, undercurl = true },
		SpellLocal                               = { sp = palette.subtle, undercurl = true },
		SpellRare                                = { sp = palette.subtle, undercurl = true },
		StatusLine                               = { fg = palette.subtle, bg = palette.surface },
		StatusLineNC                             = { fg = palette.muted, bg = palette.surface, blend = 60 },
		StatusLineTerm                           = { fg = palette.base, bg = palette.nuur },
		StatusLineTermNC                         = { fg = palette.base, bg = palette.nuur, blend = 60 },
		Substitute                               = { link = "IncSearch" },
		TabLine                                  = { fg = palette.subtle, bg = palette.surface },
		TabLineFill                              = { bg = palette.surface },
		TabLineSel                               = { fg = palette.text, bg = palette.overlay, bold = styles.bold },
		Title                                    = { fg = palette.mus, bold = styles.bold },
		VertSplit                                = { fg = palette.uvs },
		Visual                                   = { bg = palette.high, blend = 25 },
		VisualNOS                                = { link = "Visual" },
		WarningMsg                               = { fg = palette.anis, bold = styles.bold },
		-- Whitespace = {},
		WildMenu                                 = { link = "IncSearch" },
		WinBar                                   = { fg = palette.subtle, bg = palette.surface },
		WinBarNC                                 = { fg = palette.muted, bg = palette.surface, blend = 60 },
		WinSeparator                             = { fg = palette.uvs },

		DiagnosticError                          = { fg = palette.anis },
		DiagnosticHint                           = { fg = palette.uvs },
		DiagnosticInfo                           = { fg = palette.mus },
		DiagnosticOk                             = { fg = palette.uvs },
		DiagnosticWarn                           = { fg = palette.els },
		DiagnosticDefaultError                   = { link = "DiagnosticError" },
		DiagnosticDefaultHint                    = { link = "DiagnosticHint" },
		DiagnosticDefaultInfo                    = { link = "DiagnosticInfo" },
		DiagnosticDefaultOk                      = { link = "DiagnosticOk" },
		DiagnosticDefaultWarn                    = { link = "DiagnosticWarn" },
		DiagnosticFloatingError                  = { link = "DiagnosticError" },
		DiagnosticFloatingHint                   = { link = "DiagnosticHint" },
		DiagnosticFloatingInfo                   = { link = "DiagnosticInfo" },
		DiagnosticFloatingOk                     = { link = "DiagnosticOk" },
		DiagnosticFloatingWarn                   = { link = "DiagnosticWarn" },
		DiagnosticSignError                      = { link = "DiagnosticError" },
		DiagnosticSignHint                       = { link = "DiagnosticHint" },
		DiagnosticSignInfo                       = { link = "DiagnosticInfo" },
		DiagnosticSignOk                         = { link = "DiagnosticOk" },
		DiagnosticSignWarn                       = { link = "DiagnosticWarn" },
		DiagnosticUnderlineError                 = { sp = palette.anis, undercurl = true },
		DiagnosticUnderlineHint                  = { sp = palette.uvs, undercurl = true },
		DiagnosticUnderlineInfo                  = { sp = palette.mus, undercurl = true },
		DiagnosticUnderlineOk                    = { sp = palette.uvs, undercurl = true },
		DiagnosticUnderlineWarn                  = { sp = palette.els, undercurl = true },
		DiagnosticVirtualTextError               = { fg = palette.anis, bg = palette.anis, blend = 10 },
		DiagnosticVirtualTextHint                = { fg = palette.uvs, bg = palette.uvs, blend = 10 },
		DiagnosticVirtualTextInfo                = { fg = palette.mus, bg = palette.mus, blend = 10 },
		DiagnosticVirtualTextOk                  = { fg = palette.uvs, bg = palette.uvs, blend = 10 },
		DiagnosticVirtualTextWarn                = { fg = palette.els, bg = palette.els, blend = 10 },

		Boolean                                  = { fg = palette.sarnai },
		Character                                = { fg = palette.els },
		Comment                                  = { fg = palette.muted, italic = styles.italic },
		Conditional                              = { fg = palette.nuur },
		Constant                                 = { fg = palette.els },
		Debug                                    = { fg = palette.sarnai },
		Define                                   = { fg = palette.uvs },
		Delimiter                                = { fg = palette.subtle },
		Error                                    = { fg = palette.anis },
		Exception                                = { fg = palette.nuur },
		Float                                    = { fg = palette.els },
		Function                                 = { fg = palette.sarnai },
		Identifier                               = { fg = palette.text },
		Include                                  = { fg = palette.nuur },
		Keyword                                  = { fg = palette.nuur },
		Label                                    = { fg = palette.mus },
		LspCodeLens                              = { fg = palette.subtle },
		LspCodeLensSeparator                     = { fg = palette.muted },
		LspInlayHint                             = { fg = palette.muted, bg = palette.muted, blend = 10 },
		LspReferenceRead                         = { bg = palette.mid },
		LspReferenceText                         = { bg = palette.mid },
		LspReferenceWrite                        = { bg = palette.mid },
		Macro                                    = { fg = palette.uvs },
		Number                                   = { fg = palette.els },
		Operator                                 = { fg = palette.subtle },
		PreCondit                                = { fg = palette.uvs },
		PreProc                                  = { link = "PreCondit" },
		Repeat                                   = { fg = palette.nuur },
		Special                                  = { fg = palette.mus },
		SpecialChar                              = { link = "Special" },
		SpecialComment                           = { fg = palette.uvs },
		Statement                                = { fg = palette.nuur, bold = styles.bold },
		StorageClass                             = { fg = palette.mus },
		String                                   = { fg = palette.els },
		Structure                                = { fg = palette.mus },
		Tag                                      = { fg = palette.mus },
		Todo                                     = { fg = palette.sarnai, bg = palette.sarnai, blend = 20 },
		Type                                     = { fg = palette.mus },
		TypeDef                                  = { link = "Type" },
		Underlined                               = { fg = palette.uvs, underline = true },

		healthError                              = { fg = palette.anis },
		healthSuccess                            = { fg = palette.mus },
		healthWarning                            = { fg = palette.els },

		htmlArg                                  = { fg = palette.uvs },
		htmlBold                                 = { bold = styles.bold },
		htmlEndTag                               = { fg = palette.subtle },
		htmlH1                                   = { link = "markdownH1" },
		htmlH2                                   = { link = "markdownH2" },
		htmlH3                                   = { link = "markdownH3" },
		htmlH4                                   = { link = "markdownH4" },
		htmlH5                                   = { link = "markdownH5" },
		htmlItalic                               = { italic = styles.italic },
		htmlLink                                 = { link = "markdownUrl" },
		htmlTag                                  = { fg = palette.subtle },
		htmlTagN                                 = { fg = palette.text },
		htmlTagName                              = { fg = palette.mus },

		markdownDelimiter                        = { fg = palette.subtle },
		markdownH1                               = { fg = palette.uvs, bold = styles.bold },
		markdownH1Delimiter                      = { link = "markdownH1" },
		markdownH2                               = { fg = palette.mus, bold = styles.bold },
		markdownH2Delimiter                      = { link = "markdownH2" },
		markdownH3                               = { fg = palette.sarnai, bold = styles.bold },
		markdownH3Delimiter                      = { link = "markdownH3" },
		markdownH4                               = { fg = palette.els, bold = styles.bold },
		markdownH4Delimiter                      = { link = "markdownH4" },
		markdownH5                               = { fg = palette.nuur, bold = styles.bold },
		markdownH5Delimiter                      = { link = "markdownH5" },
		markdownH6                               = { fg = palette.anis, bold = styles.bold },
		markdownH6Delimiter                      = { link = "markdownH6" },
		markdownLinkText                         = { link = "markdownUrl" },
		markdownUrl                              = { fg = palette.els, sp = palette.els, underline = true },

		mkdCode                                  = { fg = palette.mus, italic = styles.italic },
		mkdCodeDelimiter                         = { fg = palette.sarnai },
		mkdCodeEnd                               = { fg = palette.mus },
		mkdCodeStart                             = { fg = palette.mus },
		mkdFootnotes                             = { fg = palette.mus },
		mkdID                                    = { fg = palette.mus, underline = true },
		mkdInlineURL                             = { link = "markdownUrl" },
		mkdLink                                  = { link = "markdownUrl" },
		mkdLinkDef                               = { link = "markdownUrl" },
		mkdListItemLine                          = { fg = palette.text },
		mkdRule                                  = { fg = palette.subtle },
		mkdURL                                   = { link = "markdownUrl" },

		--- Treesitter
		--- |:help treesitter-highlight-palette|
		["@variable"]                            = { fg = palette.text, italic = styles.italic },
		["@variable.builtin"]                    = { fg = palette.anis, italic = styles.italic, bold = styles.bold },
		["@variable.parameter"]                  = { fg = palette.uvs, italic = styles.italic },
		["@variable.parameter.builtin"]          = { fg = palette.uvs, italic = styles.italic, bold = styles.bold },
		["@variable.member"]                     = { fg = palette.mus },

		["@constant"]                            = { fg = palette.els },
		["@constant.builtin"]                    = { fg = palette.els, bold = styles.bold },
		["@constant.macro"]                      = { fg = palette.els },

		["@module"]                              = { fg = palette.text },
		["@module.builtin"]                      = { fg = palette.text, bold = styles.bold },
		["@label"]                               = { link = "Label" },

		["@string"]                              = { link = "String" },
		-- ["@string.documentation"] = {},
		["@string.regexp"]                       = { fg = palette.uvs },
		["@string.escape"]                       = { fg = palette.nuur },
		["@string.special"]                      = { link = "String" },
		["@string.special.symbol"]               = { link = "Identifier" },
		["@string.special.url"]                  = { fg = palette.els },
		-- ["@string.special.path"] = {},

		["@character"]                           = { link = "Character" },
		["@character.special"]                   = { link = "Character" },

		["@boolean"]                             = { link = "Boolean" },
		["@number"]                              = { link = "Number" },
		["@number.float"]                        = { link = "Number" },
		["@float"]                               = { link = "Number" },

		["@type"]                                = { fg = palette.mus },
		["@type.builtin"]                        = { fg = palette.mus, bold = styles.bold },
		-- ["@type.definition"] = {},

		["@attribute"]                           = { fg = palette.uvs },
		["@attribute.builtin"]                   = { fg = palette.uvs, bold = styles.bold },
		["@property"]                            = { fg = palette.mus, italic = styles.italic },

		["@function"]                            = { fg = palette.sarnai },
		["@function.builtin"]                    = { fg = palette.sarnai, bold = styles.bold },
		-- ["@function.call"] = {},
		["@function.macro"]                      = { link = "Function" },

		["@function.method"]                     = { fg = palette.sarnai },
		["@function.method.call"]                = { fg = palette.uvs },

		["@constructor"]                         = { fg = palette.mus },
		["@operator"]                            = { link = "Operator" },

		["@keyword"]                             = { link = "Keyword" },
		-- ["@keyword.coroutine"] = {},
		-- ["@keyword.function"] = {},
		["@keyword.operator"]                    = { fg = palette.subtle },
		["@keyword.import"]                      = { fg = palette.nuur },
		["@keyword.storage"]                     = { fg = palette.mus },
		["@keyword.repeat"]                      = { fg = palette.nuur },
		["@keyword.return"]                      = { fg = palette.nuur },
		["@keyword.debug"]                       = { fg = palette.sarnai },
		["@keyword.exception"]                   = { fg = palette.nuur },

		["@keyword.conditional"]                 = { fg = palette.nuur },
		["@keyword.conditional.ternary"]         = { fg = palette.nuur },

		["@keyword.directive"]                   = { fg = palette.uvs },
		["@keyword.directive.define"]            = { fg = palette.uvs },

		--- Punctuation
		["@punctuation.delimiter"]               = { fg = palette.subtle },
		["@punctuation.bracket"]                 = { fg = palette.subtle },
		["@punctuation.special"]                 = { fg = palette.subtle },

		--- Comments
		["@comment"]                             = { link = "Comment" },
		-- ["@comment.documentation"] = {},

		["@comment.error"]                       = { fg = palette.anis },
		["@comment.warning"]                     = { fg = palette.els },
		["@comment.todo"]                        = { fg = palette.sarnai, bg = palette.sarnai, blend = 15 },
		["@comment.hint"]                        = { fg = palette.uvs, bg = palette.uvs, blend = 15 },
		["@comment.info"]                        = { fg = palette.mus, bg = palette.mus, blend = 15 },
		["@comment.note"]                        = { fg = palette.nuur, bg = palette.nuur, blend = 15 },

		--- Markup
		["@markup.strong"]                       = { bold = styles.bold },
		["@markup.italic"]                       = { italic = styles.italic },
		["@markup.strikethrough"]                = { strikethrough = true },
		["@markup.underline"]                    = { underline = true },

		["@markup.heading"]                      = { fg = palette.mus, bold = styles.bold },

		["@markup.quote"]                        = { fg = palette.text },
		["@markup.math"]                         = { link = "Special" },
		["@markup.environment"]                  = { link = "Macro" },
		["@markup.environment.name"]             = { link = "@type" },

		-- ["@markup.link"] = {},
		["@markup.link.markdown_inline"]         = { fg = palette.subtle },
		["@markup.link.label.markdown_inline"]   = { fg = palette.mus },
		["@markup.link.url"]                     = { fg = palette.els },

		-- ["@markup.raw"] = { bg = palette.surface },
		-- ["@markup.raw.block"] = { bg = palette.surface },
		["@markup.raw.delimiter.markdown"]       = { fg = palette.subtle },

		["@markup.list"]                         = { fg = palette.nuur },
		["@markup.list.checked"]                 = { fg = palette.mus, bg = palette.mus, blend = 10 },
		["@markup.list.unchecked"]               = { fg = palette.text },

		-- Markdown headings
		["@markup.heading.1.markdown"]           = { link = "markdownH1" },
		["@markup.heading.2.markdown"]           = { link = "markdownH2" },
		["@markup.heading.3.markdown"]           = { link = "markdownH3" },
		["@markup.heading.4.markdown"]           = { link = "markdownH4" },
		["@markup.heading.5.markdown"]           = { link = "markdownH5" },
		["@markup.heading.6.markdown"]           = { link = "markdownH6" },
		["@markup.heading.1.marker.markdown"]    = { link = "markdownH1Delimiter" },
		["@markup.heading.2.marker.markdown"]    = { link = "markdownH2Delimiter" },
		["@markup.heading.3.marker.markdown"]    = { link = "markdownH3Delimiter" },
		["@markup.heading.4.marker.markdown"]    = { link = "markdownH4Delimiter" },
		["@markup.heading.5.marker.markdown"]    = { link = "markdownH5Delimiter" },
		["@markup.heading.6.marker.markdown"]    = { link = "markdownH6Delimiter" },

		["@diff.plus"]                           = { fg = palette.mus, bg = palette.mus, blend = 20 },
		["@diff.minus"]                          = { fg = palette.anis, bg = palette.anis, blend = 20 },
		["@diff.delta"]                          = { bg = palette.sarnai, blend = 20 },

		["@tag"]                                 = { link = "Tag" },
		["@tag.attribute"]                       = { fg = palette.uvs },
		["@tag.delimiter"]                       = { fg = palette.subtle },

		--- Non-highlighting captures
		-- ["@none"] = {},
		["@conceal"]                             = { link = "Conceal" },
		["@conceal.markdown"]                    = { fg = palette.subtle },

		-- ["@spell"] = {},
		-- ["@nospell"] = {},

		--- Semantic
		["@lsp.type.comment"]                    = {},
		["@lsp.type.comment.c"]                  = { link = "@comment" },
		["@lsp.type.comment.cpp"]                = { link = "@comment" },
		["@lsp.type.enum"]                       = { link = "@type" },
		["@lsp.type.interface"]                  = { link = "@interface" },
		["@lsp.type.keyword"]                    = { link = "@keyword" },
		["@lsp.type.namespace"]                  = { link = "@namespace" },
		["@lsp.type.namespace.python"]           = { link = "@variable" },
		["@lsp.type.parameter"]                  = { link = "@parameter" },
		["@lsp.type.property"]                   = { link = "@property" },
		["@lsp.type.variable"]                   = {}, -- defer to treesitter for regular variables
		["@lsp.type.variable.svelte"]            = { link = "@variable" },
		["@lsp.typemod.function.defaultLibrary"] = { link = "@function.builtin" },
		["@lsp.typemod.operator.injected"]       = { link = "@operator" },
		["@lsp.typemod.string.injected"]         = { link = "@string" },
		["@lsp.typemod.variable.constant"]       = { link = "@constant" },
		["@lsp.typemod.variable.defaultLibrary"] = { link = "@variable.builtin" },
		["@lsp.typemod.variable.injected"]       = { link = "@variable" },
	}
end

return M
